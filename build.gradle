plugins {
    id 'java'
    id 'maven'
}

group = 'io.gaoxingliang.java-systemd'
version = '3.0.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    mvnpub
}

ext {
    MAVEN_GROUP_ID    = "com.zoomphant.plugins"
    MAVEN_ARTIFACT_ID = project.name
    MAVEN_VERSION     = project.version
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        credentials {
            username ZP_MAVEN_REPO_USERNAME
            password ZP_MAVEN_REPO_PASSWORD
        }
        url ZP_REPOSITORRY_URL
    }
}

dependencies {
    implementation 'com.github.hypfvieh:dbus-java:3.3.0'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    testImplementation 'org.testng:testng:7.4.0'
    testImplementation 'org.mockito:mockito-inline:3.8.0'
    testImplementation 'org.awaitility:awaitility:4.0.3'
}

task fatjar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'de.thjom.java.systemd.Main'
    }
    baseName = 'java-systemd-all-in-one'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: ZP_REPOSITORRY_URL) {
                authentication(userName: ZP_MAVEN_REPO_USERNAME, password: ZP_MAVEN_REPO_PASSWORD)
                pom.groupId = MAVEN_GROUP_ID
                pom.artifactId = MAVEN_ARTIFACT_ID
            }

            pom.whenConfigured { pom ->
                pom.dependencies.forEach { dep ->
                    if (dep.getVersion() == "unspecified") {
                        dep.setGroupId(MAVEN_GROUP_ID)
                        dep.setVersion(project.version)
                    }
                }
            }
        }
    }
}

task upload(dependsOn: uploadArchives) {
    doLast {
        println "Uploading $MAVEN_GROUP_ID.$project.name:$project.version ..."
    }
}
tasks.named('test') {
    useJUnitPlatform()
}
